// Test script to verify database connection and schema
import { supabase } from './lib/supabase'

async function testDatabaseConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')

  try {
    // Test 1: Check session
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...')
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession()
    if (sessionError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError.message)
    } else {
      console.log('   ‚úÖ –°–µ—Å—Å–∏—è:', sessionData.session ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞')
    }

    // Test 2: Check if tables exist by trying to query them
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...')
    
    const { error: roomsError } = await supabase
      .from('rooms')
      .select('count', { count: 'exact', head: true })
    
    if (roomsError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã rooms:', roomsError.message)
      console.error('   üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ Supabase Dashboard')
    } else {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ rooms –¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    const { error: messagesError } = await supabase
      .from('messages')
      .select('count', { count: 'exact', head: true })
    
    if (messagesError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã messages:', messagesError.message)
    } else {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ messages –¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    const { error: usersError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true })
    
    if (usersError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã users:', usersError.message)
    } else {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    const { error: filesError } = await supabase
      .from('files')
      .select('count', { count: 'exact', head: true })
    
    if (filesError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã files:', filesError.message)
    } else {
      console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ files –¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    // Test 3: Test Realtime subscription (just check if it's available)
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Realtime...')
    console.log('   ‚ÑπÔ∏è  Realtime –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç')

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google OAuth –≤ Supabase Dashboard')
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev')
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google')

  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

// Run test if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  testDatabaseConnection()
}

export { testDatabaseConnection }

