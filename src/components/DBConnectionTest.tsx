import { useState } from 'react'
import { supabase } from '../lib/supabase'

export default function DBConnectionTest() {
  const [status, setStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle')
  const [message, setMessage] = useState('')
  const [details, setDetails] = useState<string[]>([])

  const testConnection = async () => {
    setStatus('testing')
    setMessage('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    setDetails([])

    try {
      const newDetails: string[] = []

      // Test 1: Check session
      newDetails.push('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...')
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession()
      if (sessionError) throw sessionError
      newDetails.push('   ‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞')
      if (sessionData.session) {
        newDetails.push(`   üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${sessionData.session.user.email}`)
      }

      // Test 2: Check user profile in public.users
      newDetails.push('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', sessionData.session?.user.id)
        .single()

      if (userError) {
        newDetails.push(`   ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userError.message}`)
        newDetails.push('   üí° –¢—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
      } else {
        newDetails.push('   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω')
        newDetails.push(`   üë§ –ò–º—è: ${userData.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`)
      }

      // Test 3: Test rooms table access
      newDetails.push('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ rooms...')
      const { error: roomsError } = await supabase
        .from('rooms')
        .select('count', { count: 'exact', head: true })

      if (roomsError) {
        if (roomsError.code === 'PGRST301' || roomsError.message.includes('permission')) {
          newDetails.push('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–≤–æ–∑–º–æ–∂–Ω–æ RLS –ø–æ–ª–∏—Ç–∏–∫–∞)')
        } else {
          throw roomsError
        }
      } else {
        newDetails.push('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ rooms —Ä–∞–±–æ—Ç–∞–µ—Ç')
      }

      // Test 4: Test messages table access
      newDetails.push('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ messages...')
      const { error: messagesError } = await supabase
        .from('messages')
        .select('count', { count: 'exact', head: true })

      if (messagesError) {
        if (messagesError.code === 'PGRST301' || messagesError.message.includes('permission')) {
          newDetails.push('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–≤–æ–∑–º–æ–∂–Ω–æ RLS –ø–æ–ª–∏—Ç–∏–∫–∞)')
        } else {
          throw messagesError
        }
      } else {
        newDetails.push('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ messages —Ä–∞–±–æ—Ç–∞–µ—Ç')
      }

      // Test 5: Try to create a test room
      newDetails.push('\n5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã...')
      const { data: newRoom, error: createError } = await supabase
        .from('rooms')
        .insert({
          title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          system_prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç',
          model: 'gpt-4o-mini',
          created_by: sessionData.session?.user.id,
        })
        .select()
        .single()

      if (createError) {
        newDetails.push(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${createError.message}`)
      } else {
        newDetails.push(`   ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${newRoom.id}`)
        
        // Clean up - delete test room
        await supabase.from('rooms').delete().eq('id', newRoom.id)
        newDetails.push('   üóëÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
      }

      setStatus('success')
      setMessage('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
      setDetails(newDetails)
    } catch (error: any) {
      setStatus('error')
      setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      setDetails([...details, `–û—à–∏–±–∫–∞: ${error.message}`])
      console.error('DB connection test error:', error)
    }
  }

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
      <button
        onClick={testConnection}
        disabled={status === 'testing'}
        className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors font-semibold"
      >
        {status === 'testing' ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
      </button>
      {message && (
        <div className={`mt-4 p-4 rounded-lg ${
          status === 'success' ? 'bg-green-100 text-green-800 border border-green-300' :
          status === 'error' ? 'bg-red-100 text-red-800 border border-red-300' :
          'bg-blue-100 text-blue-800 border border-blue-300'
        }`}>
          <div className="font-semibold mb-2">{message}</div>
          {details.length > 0 && (
            <div className="mt-2 space-y-1">
              {details.map((detail, index) => (
                <div key={index} className="text-sm whitespace-pre-line font-mono">
                  {detail}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  )
}

