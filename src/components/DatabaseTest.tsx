import { useState } from 'react'
import { supabase } from '../lib/supabase'

export default function DatabaseTest() {
  const [status, setStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle')
  const [results, setResults] = useState<string[]>([])

  const testDatabase = async () => {
    setStatus('testing')
    setResults(['üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...'])

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: userError } = await supabase.auth.getUser()
      if (userError) throw userError

      if (!user) {
        setStatus('error')
        setResults([...results, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google.'])
        return
      }

      setResults(prev => [...prev, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.email}`])

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { data: userProfile, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()

      if (profileError) {
        if (profileError.code === 'PGRST116') {
          setResults(prev => [...prev, '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users'])
        } else {
          throw profileError
        }
      } else {
        setResults(prev => [...prev, `‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${userProfile.email || userProfile.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}`])
      }

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ rooms
      const { error: roomsError } = await supabase
        .from('rooms')
        .select('count')
        .limit(1)

      if (roomsError) {
        if (roomsError.code === 'PGRST301' || roomsError.message.includes('permission')) {
          setResults(prev => [...prev, '‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ rooms –æ–≥—Ä–∞–Ω–∏—á–µ–Ω RLS (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)'])
        } else {
          throw roomsError
        }
      } else {
        setResults(prev => [...prev, '‚úÖ –¢–∞–±–ª–∏—Ü–∞ rooms –¥–æ—Å—Ç—É–ø–Ω–∞'])
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ messages
      const { error: messagesError } = await supabase
        .from('messages')
        .select('count')
        .limit(1)

      if (messagesError) {
        if (messagesError.code === 'PGRST301' || messagesError.message.includes('permission')) {
          setResults(prev => [...prev, '‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ messages –æ–≥—Ä–∞–Ω–∏—á–µ–Ω RLS (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)'])
        } else {
          throw messagesError
        }
      } else {
        setResults(prev => [...prev, '‚úÖ –¢–∞–±–ª–∏—Ü–∞ messages –¥–æ—Å—Ç—É–ø–Ω–∞'])
      }

      // 5. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
      const { data: testRoom, error: createRoomError } = await supabase
        .from('rooms')
        .insert({
          title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
          system_prompt: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç',
          model: 'gpt-4o-mini',
          created_by: user.id
        })
        .select()
        .single()

      if (createRoomError) {
        setResults(prev => [...prev, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É: ${createRoomError.message}`])
      } else {
        setResults(prev => [...prev, `‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${testRoom.title}`])
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
        await supabase
          .from('rooms')
          .delete()
          .eq('id', testRoom.id)
        
        setResults(prev => [...prev, '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'])
      }

      setStatus('success')
      setResults(prev => [...prev, '\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'])

    } catch (error: any) {
      setStatus('error')
      setResults(prev => [...prev, `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`])
      console.error('Database test error:', error)
    }
  }

  return (
    <div className="p-6 bg-white rounded-lg shadow-lg max-w-2xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
      <button
        onClick={testDatabase}
        disabled={status === 'testing'}
        className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed font-semibold mb-4"
      >
        {status === 'testing' ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ë–î'}
      </button>
      
      {results.length > 0 && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <pre className="whitespace-pre-wrap text-sm font-mono">
            {results.join('\n')}
          </pre>
        </div>
      )}

      {status === 'success' && (
        <div className="mt-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
          ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        </div>
      )}

      {status === 'error' && (
        <div className="mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
        </div>
      )}
    </div>
  )
}

